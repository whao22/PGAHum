general {
    base_exp_dir = ./exp/CoreView_386/
    recording = [./,]
    total_bones = 24
}

dataset {
    dim = 3
    dataset = zju_mocap
    data_dir = data/data_prepared
    use_aug = False
    normalized_scale = True
    train_split = [CoreView_386]
    val_split = [CoreView_386]
    test_split = [CoreView_386]
    train_views = [0]
    test_views = [0]
    val_views = [0]
    N_frames = 654

    train_subsampling_rate = 1
    train_start_frame = 0
    train_end_frame = 500
    val_subsampling_rate = 50
    val_start_frame = 500
    val_end_frame = -1
    test_subsampling_rate = 10
    test_start_frame = 500
    test_end_frame = -1

    box_margin = 0.05
    erode_mask = False
    resize_img_scale = 1
    backgroung_color = [0., 0., 0.]
    sample_subject_ratio = 0.8
    patch_size = 32
    N_patches = 4
    ray_shoot_mode = patch
    inner_sampling = True
    res_level = 1
}

train {
    gpus = [0]
    batch_size = 1
    num_workers = 8

    val_every_epoch = 5
    log_every_step = 1 # 10

    save_every_epoch  = 20
    max_epochs = 500
    anneal_end = 50000
    warm_up_end = 5000

    lr = 5e-4
    lr_skinning_model = 1e-4
    lr_non_rigid_mlp = 5e-5
    lr_sdf_decoder_net = 1e-6
    lr_sdf_decoder_pose_encoder = 1e-4

    weights {
        rgb_weight = 50, # 10,
        perceptual_weight = 5, # 1,
        eikonal_weight = 0.1, # 0.01
        mask_weight = 0,
        skinning_weight = 0,
        params_weight = 0,
        pose_refine_weight = 1,
    }
    rgb_loss_type = l1
    view_input_noise = True
    pose_input_noise = True
    nv_noise_type = rotation
    sdf_mode = tri # mlp # hyper_net
}


model {
    cano_view_dirs = False
    near_surface_samples = 16
    far_surface_samples = 16
    nets_path = data/pretrained/humannerf/zju_mocap/377/latest.tar
    geo_pose_encoder = latent
    color_pose_encoder = latent

    offset_net {
        D = 6,
        d_in = 3,
        W = 128,
        output_ch = 3, 
        skips = [4],
        multires = 6
    }

    skinning_model {
        optim_skinning_net_path = data/pretrained/meta-avatar/conv-unet-plane64x3-shallow-hierarchical_CAPE_keep-aspect_stage0-meta-fwd_batch-size-4_1gpus/model_best.pt,
        d_in = 3,
        d_out = 25,
        d_hidden = 128,
        n_layers = 4,
        skip_in = [],
        cond_in = [],
        multires = 0,
        bias = 1.0,
        geometric_init = False,
        weight_norm = True
    }
    
    non_rigid {
        condition_code_size = 69,
        mlp_width = 128,
        mlp_depth = 6,
        skips = [4],
        multires = 6,       # log2 of max freq for positional encoding (3D location)
        i_embed = 0,        # set 0 for default positional encoding, -1 for none
        kick_in_iter = 999999999999999999999,
        full_band_iter = 50000
    }
    
    pose_refiner{
        embedding_size = 69,
        mlp_width = 256,
        mlp_depth = 4,
        kick_in_iter = 999999999999999999999, # for pose refiner
    }

    nerf {
        D = 8,
        d_in = 4,
        d_in_view = 3,
        W = 256,
        multires = 10,
        multires_view = 4,
        output_ch = 4,
        skips=[4],
        use_viewdirs=True
    }

    decoder_kwargs {
        in_features = 3, 
        num_hidden_layers = 5, 
        hierarchical_pose = True, 
        hyper_in_ch = 144, 
        use_FiLM = True,
        geometry_net = data/pretrained/meta-avatar/conv-unet-plane64x3_CAPE-SV_keep-aspect_stage2-inner-1e-6-outer-1e-6_1gpus/model_best.pt
    }

    sdf_network {
        d_out = 257,
        d_in = 3,
        d_hidden = 256,
        n_layers = 8,
        skip_in = [4],
        multires = 16,
        bias = 0.5,
        scale = 1.0,
        geometric_init = True,
        weight_norm = True
    }

    sdf_network_high {
        d_out = 257,
        d_in = 3,
        d_hidden = 256,
        n_layers = 8,
        skip_in = [4],
        multires = 16,
        bias = 0.5,
        scale = 1.0,
        geometric_init = False,
        weight_norm = True
    }

    triplane_network {
        img_resolution = 512,
        img_channels = 24,
        rendering_kwargs {
            box_warp = 3,
            density_reg = 1.0,
            PE_res = 12,
            attention_window_size = 8,
            attention_numheads = 2,
            multiply_PE_res = 8,
            is_dec_geoinit = True
        }
        triplane_sdf {
            d_out = 257,
            d_in = 288,
            d_hidden = 256,
            n_layers = 3
        }
        triplane_sdf_ini {
            d_out = 24,
            d_in = 3,
            d_hidden = 256,
            n_layers = 5
        }
    }

    variance_network {
        init_val = 0.3
    }

    rendering_network {
        d_feature = 256,
        mode = idr,
        d_in = 9,
        d_out = 3,
        d_hidden = 256,
        n_layers = 4,
        weight_norm = True,
        multires_view = 6,
        squeeze_out = True
    }

    neus_renderer {
        n_samples = 64,
        n_importance = 0,
        n_outside = 0,
        up_sample_steps = 4,     # 1 for simple coarse-to-fine sampling
        perturb = 1.0,
        is_adasamp = True,
        N_iter_backward = 0,
        use_init_sdf = True,
        sdf_threshold = 0.05
    }
}